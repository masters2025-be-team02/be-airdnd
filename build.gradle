plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'kr.kro'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

ext {
	snippetsDir = layout.buildDirectory.dir("generated-snippets").get().asFile
}

dependencies {
	// Spring Web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//Spring Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Spring Data JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//해싱
	implementation 'org.mindrot:jbcrypt:0.4'

	//Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// Flyway
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MySQL JDBC 드라이버
	runtimeOnly 'com.mysql:mysql-connector-j'

	//query dsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// 테스트
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//test container
	testImplementation("org.testcontainers:junit-jupiter")
	testImplementation("org.testcontainers:mysql")
}


tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}


tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor

	from file("build/docs/asciidoc/")
	into file("build/resources/main/static/docs")
}

build {
	dependsOn copyDocument
	dependsOn asciidoctor
}

tasks.register('generateAdoc') {
	dependsOn test
	doLast {
		def dir = layout.buildDirectory.dir("generated-snippets").get().asFile
		def adocDir = file("src/docs/asciidoc/generated")

		if (!adocDir.exists()) {
			adocDir.mkdirs()
		}

		def indexFile = file("src/docs/asciidoc/index.adoc")
		def content = new StringBuilder()

		// 헤더 개선
		content << "= Airbob REST API 문서\n"
		content << ":doctype: book\n"
		content << ":toc: left\n"
		content << ":toclevels: 3\n"
		content << ":sectlinks:\n"
		content << ":sectnums:\n"
		content << ":icons: font\n"
		content << ":source-highlighter: highlightjs\n"
		content << ":highlightjs-theme: github\n"
		content << ":docinfo1:\n\n"

		// API 개요 추가
		content << "== 개요\n\n"
		content << "이 문서는 Airbob 서비스의 REST API에 대한 명세를 제공합니다.\n\n"
		content << "=== 기본 정보\n"
		content << "* Base URL: `http://localhost:8080/api`\n"
		content << "* Content-Type: `application/json`\n"
		content << "* 인증 방식: Bearer Token\n\n"

		// 공통 응답 코드
		content << "=== 공통 응답 코드\n"
		content << "|===\n"
		content << "|상태 코드|설명\n\n"
		content << "|200|성공\n"
		content << "|201|생성 성공\n"
		content << "|400|잘못된 요청\n"
		content << "|401|인증 실패\n"
		content << "|403|권한 없음\n"
		content << "|404|리소스 없음\n"
		content << "|500|서버 오류\n"
		content << "|===\n\n"

		// 카테고리별 그룹화를 위한 맵
		def apiGroups = [:]

		dir.listFiles()?.each { snippetDir ->
			def snippetName = snippetDir.name

			// 카테고리 분류 로직 개선
			def category = categorizeApi(snippetName)

			if (!apiGroups.containsKey(category)) {
				apiGroups[category] = []
			}
			apiGroups[category].add(snippetName)
		}

		// 카테고리별로 문서 생성
		def categoryOrder = ["위시리스트", "숙소", "할인", "회원", "기타"]

		categoryOrder.each { category ->
			if (apiGroups.containsKey(category)) {
				content << "== ${category} API\n\n"

				apiGroups[category].sort().each { snippetName ->
					generateApiSection(content, snippetName, adocDir, dir)
				}
			}
		}

		indexFile.text = content.toString()
	}
}

// API 카테고리 분류 함수
def categorizeApi(String snippetName) {
	def name = snippetName.toLowerCase()

	if (name.contains("위시리스트") || name.contains("wishlist")) {
		return "위시리스트"
	} else if (name.contains("숙소") || name.contains("accommodation")) {
		return "숙소"
	} else if (name.contains("할인") || name.contains("discount")) {
		return "할인"
	} else if (name.contains("회원") || name.contains("member")) {
		return "회원"
	} else {
		return "기타"
	}
}

// 개별 API 섹션 생성 함수
def generateApiSection(StringBuilder content, String snippetName, File adocDir, File snippetsDir) {
	def adocFile = new File(adocDir, "${snippetName}.adoc")
	def includes = new StringBuilder()

	// 제목 개선 - 테스트 이름을 사용자 친화적으로 변환
	def friendlyTitle = makeFriendlyTitle(snippetName)
	includes << "=== ${friendlyTitle}\n\n"

	// 설명 부분들을 순서대로 배치
	def sections = [
			"http-request": "요청",
			"path-parameters": "경로 변수",
			"query-parameters": "쿼리 파라미터",
			"request-fields": "요청 필드",
			"http-response": "응답",
			"response-fields": "응답 필드",
			"response-headers": "응답 헤더"
	]

	sections.each { part, desc ->
		def fileToInclude = new File(snippetsDir, "${snippetName}/${part}.adoc")
		if (fileToInclude.exists()) {
			includes << "==== ${desc}\n"
			includes << "include::{snippets}/${snippetName}/${part}.adoc[]\n\n"
		}
	}

	adocFile.text = includes.toString()

	// index.adoc에 포함
	content << "include::{generated}/${snippetName}.adoc[]\n\n"
}

// 테스트 이름을 사용자 친화적인 제목으로 변환
def makeFriendlyTitle(String snippetName) {
	// 하이픈을 기준으로 분리하고 의미있는 제목 생성
	def parts = snippetName.split('-')

	// 공통 패턴 매핑
	def actionMap = [
			"생성": "생성",
			"수정": "수정",
			"삭제": "삭제",
			"조회": "조회",
			"목록": "목록 조회",
			"추가": "추가",
			"제거": "제거",
			"성공": "",
			"실패": "(실패)",
			"오류": "(오류)"
	]

	def result = []
	parts.each { part ->
		if (actionMap.containsKey(part)) {
			def mapped = actionMap[part]
			if (mapped) result.add(mapped)
		} else if (!part.matches(".*test.*|.*Test.*")) {
			result.add(part)
		}
	}

	return result.join(" ").trim()
}

asciidoctor {
	dependsOn generateAdoc
	sourceDir = file('src/docs/asciidoc')
	sources {
		include 'index.adoc'
	}
	outputDir = layout.buildDirectory.dir("docs/asciidoc").get().asFile
	attributes(
			'snippets': snippetsDir,
			'generated': file('src/docs/asciidoc/generated'),
			'toc': 'left',
			'toclevels': '3',
			'sectlinks': '',
			'sectnums': '',
			'icons': 'font',
			'source-highlighter': 'highlightjs',
			'highlightjs-theme': 'github'
	)
}

tasks.register('packageZip', Zip) {
	dependsOn build
	archiveFileName = 'airbob-deploy.zip'
	destinationDirectory = file("$buildDir/distributions")

	from('build/libs') {
		include '*.jar'
	}
	from('scripts') {
		into 'scripts'
	}
	from('appspec.yml')
}
